generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  role          UserRole
  username      String
  kakaoUid      String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ClassroomUser ClassroomUser[]
  LmsMetrics    LmsMetric[]

  @@map("user")
}

model Classroom {
  id          String          @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Users       ClassroomUser[]
  Units       ClassroomUnit[]

  @@map("classroom")
}

model ClassroomUser {
  id        String    @id @default(uuid())
  user      String
  User      User      @relation(fields: [user], references: [id])
  classroom String
  Classroom Classroom @relation(fields: [classroom], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("classroom_user")
}

model ClassroomUnit {
  id          String             @id @default(uuid())
  classroom   String
  Classroom   Classroom          @relation(fields: [classroom], references: [id])
  title       String
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  Subunits    ClassroomSubunit[]

  @@map("classroom_unit")
}

model ClassroomSubunit {
  id            String             @id @default(uuid())
  unitId        String
  ClassroomUnit ClassroomUnit      @relation(fields: [unitId], references: [id])
  title         String
  code          String
  description   String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Contents      ClassroomContent[]

  @@map("classroom_subunit")
}

model ClassroomContent {
  id               String           @id @default(uuid())
  subunitId        String
  ClassroomSubunit ClassroomSubunit @relation(fields: [subunitId], references: [id])
  label            String
  type             String
  body             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("classroom_content")
}

model LmsMetric {
  id        String   @id @default(uuid())
  metric    Metric
  value     Json
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lms_metric")
}

enum UserRole {
  student
  teacher
}

enum Metric {
  studyTime
}
